{"version":3,"sources":["apis/youtube.js","components/SearchBar.js","components/VideoFrame.js","components/VideoList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","SearchBar","submit","useState","searchTerm","setSearch","Paper","elevation","style","padding","width","onSubmit","e","preventDefault","TextField","fullWidth","label","onChange","target","value","VideoFrame","video","vidsrc","id","videoId","height","frameBorder","title","src","Typography","variant","snippet","Chip","color","channelTitle","description","VideoList","App","videos","setVideos","selectedVideo","setSelect","handleSearch","search","a","youtube","get","params","part","maxResults","key","q","res","data","items","useEffect","Grid","container","paddingTop","paddingLeft","item","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAQ,0C,2BCkBGC,MAlBf,YAA8B,IAAVC,EAAS,EAATA,OAAS,EAEMC,mBAAS,IAFf,mBAElBC,EAFkB,KAEPC,EAFO,KASzB,OACI,kBAACC,EAAA,EAAD,CAAOC,UAAW,EAAGC,MAAO,CAACC,QAAQ,OAAOC,MAAM,QAC9C,0BAAMC,SAPO,SAACC,GAClBA,EAAEC,iBACFX,EAAOE,KAMC,kBAACU,EAAA,EAAD,CAAWC,WAAS,EAACC,MAAM,YAAYC,SAAU,SAAAL,GAAC,OAAEP,EAAUO,EAAEM,OAAOC,a,kBCWxEC,MAvBf,YAA8B,IAATC,EAAQ,EAARA,MACjB,IAAIA,EAAO,OAAO,2CAElB,IAAMC,EAAM,wCAAoCD,EAAME,GAAGC,SAEzD,OAEI,oCACA,kBAAClB,EAAA,EAAD,CAAOC,UAAW,GAAIC,MAAO,CAACiB,OAAO,QACjC,4BAAQC,YAAY,IAAID,OAAO,QAAQf,MAAM,OAAOiB,MAAM,eAAgBC,IAAKN,KAEnF,kBAAChB,EAAA,EAAD,CAAOC,UAAW,EAAGC,MAAO,CAACC,QAAQ,SACjC,kBAACoB,EAAA,EAAD,CAAYC,QAAQ,KAAKtB,MAAO,CAAEC,QAAQ,QAASY,EAAMU,QAAQJ,OACjE,kBAACE,EAAA,EAAD,CAAYC,QAAQ,YAAYtB,MAAO,CAAEC,QAAQ,QACjD,kBAACuB,EAAA,EAAD,CAAMC,MAAM,UAAUjB,MAAOK,EAAMU,QAAQG,gBAE3C,kBAACL,EAAA,EAAD,CAAYC,QAAQ,YAAYtB,MAAO,CAAEC,QAAQ,QAASY,EAAMU,QAAQI,gBCbrEC,MAJf,aC+CeC,MA1Cf,WAAgB,IAAD,EAEclC,mBAAS,IAFvB,mBAENmC,EAFM,KAECC,EAFD,OAGqBpC,mBAAS,MAH9B,mBAGNqC,EAHM,KAGQC,EAHR,KAKPC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACFC,EAAQC,IAAI,SAAS,CAACC,OAAO,CAC5CC,KAAK,UACLC,WAAW,EACXC,IAAI,0CACJC,EAAER,KALe,OACbS,EADa,OASrBb,EAAUa,EAAIC,KAAKC,OACnBb,EAAUW,EAAIC,KAAKC,MAAM,IAVJ,2CAAH,sDAiBlB,OAJAC,qBAAU,cAER,IAGE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAEjD,MAAO,CAAEkD,WAAW,KAAKC,YAAY,OACpD,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IAEb,kBAAC,EAAD,CAAW3D,OAAQwC,KAErB,kBAACc,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGrD,MAAO,CAACkD,WAAW,OAEnC,kBAAC,EAAD,CAAYrC,MAAOmB,KAErB,kBAACgB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGrD,MAAO,CAACkD,WAAW,OAArC,YAGE,kBAAC,EAAD,CAAWpB,OAAQA,OC9BTwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c810cc5.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL:\"https://www.googleapis.com/youtube/v3\",\r\n})","import React,{useState} from 'react'\r\nimport  {Paper,TextField} from \"@material-ui/core\";\r\n\r\nfunction SearchBar({submit}) {\r\n\r\n    const [searchTerm,setSearch] = useState('');\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        submit(searchTerm);\r\n    }\r\n    \r\n    return (\r\n        <Paper elevation={6} style={{padding:\"25px\",width:\"55%\"}}>\r\n            <form onSubmit={handleSubmit}>\r\n                <TextField fullWidth label=\"Search...\" onChange={e=>setSearch(e.target.value)}/>\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default SearchBar\r\n","import React from 'react'\r\nimport  {Paper,Typography,Chip} from \"@material-ui/core\";\r\n\r\nfunction VideoFrame({video}) {\r\n    if(!video) return <div>Loading...</div>\r\n    \r\n    const vidsrc = `https://www.youtube.com/embed/${video.id.videoId}`;\r\n    \r\n    return (\r\n       \r\n        <>\r\n        <Paper elevation={12} style={{height:\"70%\"}}>\r\n            <iframe frameBorder=\"0\" height=\"350px\" width=\"100%\" title=\"Video Player\"  src={vidsrc} />\r\n        </Paper>\r\n        <Paper elevation={6} style={{padding:\"15px\"}}>\r\n            <Typography variant=\"h5\" style={{ padding:\"5px\"}}>{video.snippet.title}</Typography>\r\n            <Typography variant=\"subtitle1\" style={{ padding:\"5px\"}}>\r\n            <Chip color=\"primary\" label={video.snippet.channelTitle} />\r\n            </Typography>\r\n            <Typography variant=\"subtitle2\" style={{ padding:\"7px\"}}>{video.snippet.description}</Typography>\r\n        </Paper>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default VideoFrame\r\n","import React from 'react'\r\n\r\nfunction VideoList() {\r\n   \r\n}\r\n\r\nexport default VideoList\r\n","import React,{useState,useEffect} from 'react';\nimport youtube from './apis/youtube';\nimport {Grid} from '@material-ui/core';\nimport SearchBar from './components/SearchBar';\nimport VideoFrame from './components/VideoFrame';\nimport VideoList from './components/VideoList';\n\nfunction App() {\n\n  const [videos,setVideos] = useState([]);\n  const [selectedVideo,setSelect] = useState(null);\n\n  const handleSearch = async (search) =>{\n    const res =await youtube.get('search',{params:{\n      part:'snippet',\n      maxResults:5,\n      key:'AIzaSyCHhmQByh7jiD45NTShA6kF2KEjk-tZSPw',\n      q:search\n  }});\n\n  // console.log(res.data.items);\n  setVideos(res.data.items);\n  setSelect(res.data.items[0]);\n  }\n\n  useEffect(()=>{\n    // handleSearch('youtube clone')\n  },[])\n\n  return (\n      <Grid container  style={{ paddingTop:\"4%\",paddingLeft:\"4%\",}}>\n        <Grid item xs={12} >\n          {/* Search Bar */}\n          <SearchBar submit={handleSearch}/>\n        </Grid>\n        <Grid item xs={8} style={{paddingTop:\"2%\"}}>\n          {/* Video Frame */}\n          <VideoFrame video={selectedVideo}/>\n        </Grid>\n        <Grid item xs={4} style={{paddingTop:\"2%\"}}>\n          VideoList\n\t\t  \n          <VideoList videos={videos}/>\n        </Grid>\n      </Grid>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}